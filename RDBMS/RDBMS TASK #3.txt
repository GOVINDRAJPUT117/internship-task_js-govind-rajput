database:retail stores

table:customer

CREATE TABLE customers (
    customer_id INT PRIMARY KEY, 
    first_name VARCHAR(100), 
    last_name VARCHAR(100), 
    email VARCHAR(100), 
    phone VARCHAR(20), 
    address TEXT, 
    join_date DATE
);
INSERT INTO customers (customer_id, first_name, last_name, email, phone, address, join_date) 
VALUES 
(1, 'Amit', 'Sharma', 'amit.sharma@example.com', '9876543210', '123 MG Road, Delhi', '2024-03-01'),
(2, 'Priya', 'Verma', 'priya.verma@example.com', '8765432109', '45 Park Street, Mumbai', '2024-03-05'),
(3, 'Rahul', 'Gupta', 'rahul.gupta@example.com', '7654321098', '78 Residency Road, Bangalore', '2024-02-28'),
(4, 'Neha', 'Rao', 'neha.rao@example.com', '6543210987', '99 Green Avenue, Chennai', '2024-03-10'),
(5, 'Vikram', 'Singh', 'vikram.singh@example.com', '5432109876', '12 Lotus Enclave, Pune', '2024-02-20'),
(6, 'Anjali', 'Yadav', 'anjali.yadav@example.com', '4321098765', '88 Lake View, Hyderabad', '2024-03-12'),
(7, 'Suresh', 'Mishra', 'suresh.mishra@example.com', '3210987654', '55 Gandhi Nagar, Kolkata', '2024-02-15'),
(8, 'Pooja', 'Choudhary', 'pooja.choudhary@example.com', '2109876543', '34 City Square, Jaipur', '2024-03-03'),
(9, 'Manoj', 'Patel', 'manoj.patel@example.com', '1098765432', '76 Broadway, Ahmedabad', '2024-02-25'),
(10, 'Kiran', 'Iyer', 'kiran.iyer@example.com', '9988776655', '101 Ocean Drive, Kochi', '2024-03-07');

table:product

create table products(product_id int PRIMARY key,product_name varchar(100),category varchar(50),price decimal(10,2),stock_quantity int);

INSERT INTO products (product_id, product_name, category, price, stock_quantity) 
VALUES 
(1, 'Samsung Galaxy S23', 'Electronics', 79999.99, 50),
(2, 'Sony WH-1000XM4 Headphones', 'Electronics', 24999.99, 30),
(3, 'Apple MacBook Air M2', 'Electronics', 114999.99, 20),
(4, 'Nike Air Max 270', 'Footwear', 12999.99, 100),
(5, 'Adidas Ultraboost 22', 'Footwear', 15999.99, 75),
(6, 'Woodland Leather Wallet', 'Accessories', 1999.99, 200),
(7, 'Ray-Ban Aviator Sunglasses', 'Accessories', 8999.99, 40),
(8, 'Puma Running Shoes', 'Footwear', 4999.99, 120),
(9, 'Samsung 55" 4K Smart TV', 'Electronics', 59999.99, 25),
(10, 'Leviâ€™s Denim Jacket', 'Clothing', 4999.99, 60);

===============================================================================================================
table:orders

CREATE table orders(order_id int primary key,customer_id int,
                    order_date DATE , total_amount decimal(10,2),
                    order_status varchar(20),
                    FOREIGN key (customer_id) REFERENCES customers(customer_id));

INSERT INTO orders (order_id, customer_id, order_date, total_amount, order_status) 
VALUES 
(1, 1, '2024-03-01', 15999.99, 'Shipped'),
(2, 2, '2024-03-05', 79999.99, 'Delivered'),
(3, 2, '2024-03-07', 24999.99, 'Pending'),
(4, 4, '2024-03-10', 4999.99, 'Cancelled'),
(5, 5, '2024-03-12', 12999.99, 'Delivered'),
(6, 6, '2024-03-15', 59999.99, 'Shipped'),
(7, 5, '2024-03-18', 8999.99, 'Pending'),
(8, 7, '2024-03-20', 114999.99, 'Delivered'),
(9, 10, '2024-03-22', 1999.99, 'Shipped'),
(10, 9, '2024-03-25', 15999.99, 'Pending');

=====================================================================================================================
table:orderdetail

CREATE TABLE orderdetail (
    order_detail_id INT PRIMARY KEY,  
    order_id INT,                      
    product_id INT,                    
    quantity INT,                    
    unit_price DECIMAL(10,2),            
    FOREIGN KEY (order_id) REFERENCES orders(order_id),  
    FOREIGN KEY (product_id) REFERENCES products(product_id)  
);

INSERT INTO orderdetail (order_detail_id, order_id, product_id, quantity, unit_price) 
VALUES 
(1, 1, 2, 2, 24999.99),
(2, 1, 5, 1, 15999.99),
(3, 2, 3, 1, 114999.99),
(4, 3, 7, 3, 8999.99),
(5, 4, 10, 2, 4999.99),
(6, 5, 1, 1, 79999.99),
(7, 6, 6, 5, 1999.99),
(8, 7, 9, 1, 59999.99),
(9, 8, 8, 2, 4999.99),
(10, 9, 4, 1, 12999.99);



table:payments
CREATE table payments(payment_id int PRIMARY key,order_id int ,payment_date DATE  ,payment_amount DECIMAL(10,2),payment_method varchar(20),
FOREIGN key (order_id) REFERENCES orders(order_id));


INSERT INTO payments (payment_id, order_id, payment_date, payment_amount, payment_method) 
VALUES 
(1, 1, '2024-03-02', 15999.99, 'Credit Card'),
(2, 3, '2024-03-06', 79999.99, 'UPI'),
(3, 3, '2024-03-08', 24999.99, 'Cash'),
(4, 2, '2024-03-11', 4999.99, 'Debit Card'),
(5, 1, '2024-03-13', 12999.99, 'Credit Card'),
(6, 8, '2024-03-16', 59999.99, 'UPI'),
(7, 9, '2024-03-19', 8999.99, 'Cash'),
(8, 4, '2024-03-21', 114999.99, 'Net Banking'),
(9, 7, '2024-03-23', 1999.99, 'UPI'),
(10, 4, '2024-03-26', 15999.99, 'Debit Card');


question 

1. Find the Total Number of Orders for Each Customer

 SELECT 
      customer_id, 
    COUNT(order_id) AS total_orders 
FROM orders 
GROUP BY customer_id;

2. Find the Total Sales Amount for Each Product (Revenue per Product)
 
SELECT 
    p.product_id, 
    p.product_name, 
    SUM(od.quantity * od.unit_price) AS total_revenue
FROM orderdetail od
JOIN products p ON od.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY total_revenue DESC;

3. Find the Most Expensive Product Sold

SELECT 
    p.product_id, 
    p.product_name, 
    MAX(od.unit_price) AS highest_price
FROM orderdetail od
JOIN products p ON od.product_id = p.product_id
GROUP BY p.product_id, p.product_name
ORDER BY highest_price DESC
LIMIT 1;


4. Get the List of Customers Who Have Placed Orders in the Last 30 Days

5. Calculate the Total Amount Paid by Each Customer

SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    SUM(p.payment_amount) AS total_paid
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
JOIN payments p ON o.order_id = p.order_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_paid DESC;

6. Get the Number of Products Sold by Category

SELECT 
    p.category, 
    SUM(od.quantity) AS total_products_sold
FROM orderdetail od
JOIN products p ON od.product_id = p.product_id
GROUP BY p.category
ORDER BY total_products_sold DESC;

7. List All Orders That Are Pending (i.e., Orders that haven't been shipped yet)
SELECT 
    order_id, 
    customer_id, 
    order_date, 
    total_amount, 
    order_status
FROM orders
WHERE order_status = 'Pending'
ORDER BY order_date DESC;
8. Find the Average Order Value (Total Order Amount / Number of Orders)
SELECT 
    AVG(total_amount) AS average_order_value
FROM orders;


9. List the Top 5 Customers Who Have Spent the Most Money
SELECT 
    c.customer_id, 
    c.first_name, 
    c.last_name, 
    SUM(o.total_amount) AS total_spent
FROM customers c
JOIN orders o ON c.customer_id = o.customer_id
GROUP BY c.customer_id, c.first_name, c.last_name
ORDER BY total_spent DESC
LIMIT 5;

10. Find the Products That Have Never Been Sold

SELECT 
    p.product_id, 
    p.product_name, 
    p.category, 
    p.price, 
    p.stock_quantity
FROM products p
LEFT JOIN orderdetail od ON p.product_id = od.product_id
WHERE od.product_id IS NULL;



