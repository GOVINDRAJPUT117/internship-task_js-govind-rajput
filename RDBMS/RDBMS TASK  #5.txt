database:zomato
table:restaurants

CREATE TABLE Restaurants (
    RestaurantID INT PRIMARY KEY ,
    Name VARCHAR(100),
    City VARCHAR(50),
    CuisineType VARCHAR(50) ,
    Rating DECIMAL(2,1),
    AverageCostForTwo DECIMAL(10,2)
);

INSERT INTO Restaurants (RestaurantID, Name, City, CuisineType, Rating, AverageCostForTwo) VALUES
(1, 'Spice Hub', 'Delhi', 'Indian', 4.5, 800.00),
(2, 'Golden Dragon', 'Mumbai', 'Chinese', 4.2, 1200.00),
(3, 'La Pinoz', 'Bangalore', 'Italian', 4.0, 1000.00),
(4, 'Tandoori Nights', 'Hyderabad', 'Indian', 4.3, 900.00),
(5, 'Sakura Sushi', 'Chennai', 'Japanese', 4.6, 1500.00),
(6, 'Mexican Fiesta', 'Pune', 'Mexican', 4.1, 1100.00),
(7, 'Burger House', 'Kolkata', 'American', 3.9, 750.00),
(8, 'Punjab Rasoi', 'Amritsar', 'Indian', 4.7, 850.00),
(9, 'The French Corner', 'Jaipur', 'French', 4.4, 1300.00),
(10, 'Arabian Delights', 'Lucknow', 'Middle Eastern', 4.2, 1250.00);

table:customers
CREATE TABLE Customers (
    CustomerID INT PRIMARY KEY ,
    FirstName VARCHAR(50),
    LastName VARCHAR(50),
    Phone VARCHAR(15) ,
    City VARCHAR(50),
    JoinDate DATE 
);

INSERT INTO Customers (CustomerID, FirstName, LastName, Phone, City, JoinDate) VALUES
(1, 'Amit', 'Sharma', '9876543210', 'Delhi', '2023-01-10'),
(2, 'Priya', 'Verma', '8765432109', 'Mumbai', '2022-03-15'),
(3, 'Rahul', 'Gupta', '7654321098', 'Bangalore', '2021-07-20'),
(4, 'Sneha', 'Patel', '6543210987', 'Hyderabad', '2023-05-05'),
(5, 'Vikram', 'Singh', '5432109876', 'Chennai', '2022-09-12'),
(6, 'Neha', 'Joshi', '4321098765', 'Pune', '2021-06-30'),
(7, 'Arjun', 'Mehta', '3210987654', 'Kolkata', '2020-12-18'),
(8, 'Pooja', 'Reddy', '2109876543', 'Jaipur', '2023-10-22'),
(9, 'Suresh', 'Kumar', '1098765432', 'Lucknow', '2019-05-27'),
(10, 'Kavita', 'Desai', '9988776655', 'Ahmedabad', '2024-02-10');


table:orders
CREATE TABLE Orders (
    OrderID INT PRIMARY KEY ,
    CustomerID INT,
    RestaurantID INT,
    OrderDate DATE ,
    OrderAmount DECIMAL(10,2) ,
    OrderStatus VARCHAR(20),
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID) ,
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

table: reviews
CREATE TABLE Reviews (
    ReviewID INT PRIMARY KEY,
    CustomerID INT,
    RestaurantID INT,
    Rating DECIMAL(2,1),
    Comment TEXT,
    ReviewDate DATE,
    FOREIGN KEY (CustomerID) REFERENCES Customers(CustomerID),
    FOREIGN KEY (RestaurantID) REFERENCES Restaurants(RestaurantID)
);

INSERT INTO Orders (OrderID, CustomerID, RestaurantID, OrderDate, OrderAmount, OrderStatus) VALUES
(1, 3, 3, '2024-03-01', 1200.00, 'Delivered'),
(2, 2, 5, '2024-03-02', 1500.00, 'Confirmed'),
(3, 4, 1, '2024-03-03', 800.00, 'Pending'),
(4, 5, 7, '2024-03-04', 750.00, 'Cancelled'),
(5, 6, 9, '2024-03-05', 1300.00, 'Delivered'),
(6, 8, 2, '2024-03-06', 1100.00, 'Delivered'),
(7, 9, 6, '2024-03-07', 1000.00, 'Confirmed'),
(8, 2, 4, '2024-03-08', 900.00, 'Pending'),
(9, 1, 8, '2024-03-09', 850.00, 'Delivered'),
(10, 10, 10, '2024-03-10', 1250.00, 'Confirmed');


table: payments

CREATE TABLE Payments (
    PaymentID INT PRIMARY KEY,
    OrderID INT,
    PaymentMethod VARCHAR(20),
    Amount DECIMAL(10,2),
    PaymentDate DATE,
    FOREIGN KEY (OrderID) REFERENCES Orders(OrderID)
);

INSERT INTO Payments (PaymentID, OrderID, PaymentMethod, Amount, PaymentDate) VALUES
(1, 3, 'Card', 1200.00, '2024-03-01'),
(2, 2, 'Wallet', 1500.00, '2024-03-02'),
(3, 1, 'Cash', 800.00, '2024-03-03'),
(4, 5, 'Card', 1300.00, '2024-03-05'),
(5, 7, 'Wallet', 1100.00, '2024-03-06'),
(6, 4, 'Cash', 1000.00, '2024-03-07'),
(7, 2, 'Card', 900.00, '2024-03-08'),
(8, 1, 'Wallet', 850.00, '2024-03-09'),
(9, 5, 'Card', 1250.00, '2024-03-10'),
(10, 4, 'Cash', 750.00, '2024-03-04');

=========================================================================================================================================================
Assignment Queries
1. Retrieve the names and locations of restaurants with a rating of 4.5 or higher.

SELECT Name, City 
FROM Restaurants 
WHERE Rating >= 4.5;


2. Find the total number of orders placed by each customer.
SELECT CustomerID, COUNT(OrderID) AS TotalOrders 
FROM Orders 
GROUP BY CustomerID;



3. List all restaurants offering "Italian" cuisine in "Mumbai"

SELECT Name, City, CuisineType 
FROM Restaurants 
WHERE CuisineType = 'indian' AND City = 'delhi'
.
4. Calculate the total revenue generated by each restaurant from completed orders.
SELECT 
    o.RestaurantID, 
    r.Name AS RestaurantName, 
    SUM(o.OrderAmount) AS TotalRevenue
FROM Orders o
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Delivered' 
GROUP BY o.RestaurantID, r.Name
ORDER BY TotalRevenue DESC;  


5. Retrieve the most recent order placed by each customer.

SELECT o.CustomerID, c.FirstName, c.LastName, o.OrderID, o.OrderDate, o.OrderAmount, o.OrderStatus
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
WHERE o.OrderDate = (
    SELECT MAX(OrderDate) 
    FROM Orders 
    WHERE CustomerID = o.CustomerID
);


6. List customers who have not placed any orders yet.

SELECT c.CustomerID, c.FirstName, c.LastName, c.Phone, c.City, c.JoinDate
FROM Customers c
LEFT JOIN Orders o ON c.CustomerID = o.CustomerID
WHERE o.OrderID IS NULL;


7. Identify the most reviewed restaurants.

SELECT r.RestaurantID, r.Name AS RestaurantName, COUNT(rev.ReviewID) AS TotalReviews
FROM Reviews rev
JOIN Restaurants r ON rev.RestaurantID = r.RestaurantID
GROUP BY r.RestaurantID, r.Name
ORDER BY TotalReviews DESC;


8. Find the most preferred payment method.

SELECT PaymentMethod, COUNT(PaymentID) AS UsageCount
FROM Payments
GROUP BY PaymentMethod
ORDER BY UsageCount DESC
LIMIT 1;


9. List the top 5 restaurants by total revenue.

SELECT 
    o.RestaurantID, 
    r.Name AS RestaurantName, 
    SUM(o.OrderAmount) AS TotalRevenue
FROM Orders o
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
GROUP BY o.RestaurantID, r.Name
ORDER BY TotalRevenue DESC
LIMIT 5;


10. Show the details of all cancelled orders along with the customer's and restaurant's names.

SELECT 
    o.OrderID, 
    c.FirstName AS CustomerFirstName, 
    c.LastName AS CustomerLastName, 
    r.Name AS RestaurantName, 
    o.OrderDate, 
    o.OrderAmount, 
    o.OrderStatus
FROM Orders o
JOIN Customers c ON o.CustomerID = c.CustomerID
JOIN Restaurants r ON o.RestaurantID = r.RestaurantID
WHERE o.OrderStatus = 'Cancelled';




