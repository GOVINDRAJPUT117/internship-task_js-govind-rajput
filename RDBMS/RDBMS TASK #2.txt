database:OLA

table: Drivers

create table drivers(DriverId int PRIMARY key,FirstName varchar(50),LastName varchar(50) ,Phone int,City varchar(50),vehicleType varchar(50),Rating int);

INSERT INTO Drivers (FirstName, LastName, Phone, City, VehicleType, Rating) VALUES
('Amit', 'Sharma', '9876543210', 'Delhi', 'Sedan', 5),
('Priya', 'Verma', '8765432109', 'Delhi', 'Sedan', 4),
('Rajesh', 'Gupta', '7654321098', 'Mumbai', 'SUV', 3),
('Neha', 'Rao', '6543210987', 'Mumbai', 'SUV', 4),
('Vikram', 'Singh', '5432109876', 'Bangalore', 'Hatchback', 5),
('Anjali', 'Yadav', '4321098765', 'Bangalore', 'Hatchback', 2),
('Suresh', 'Mishra', '3210987654', 'Chennai', 'Truck', 4),
('Pooja', 'Choudhary', '2109876543', 'Chennai', 'Truck', 3),
('Manoj', 'Patel', '1098765432', 'Jaipur', 'Van', 5),
('Kiran', 'Iyer', '9988776655', 'Jaipur', 'Van', 4);

=========================================================================================================
table:Riders

create table Riders(RiderId int PRIMARY key ,FirstName varchar(50),LastName varchar(50),Phone int,City varchar(50),JoinDate DATE);

INSERT INTO Riders (RiderId, FirstName, LastName, Phone, City, JoinDate) VALUES
(1, 'Arjun', 'Mehta', '9876543210', 'Delhi', '2023-01-15'),
(2, 'Sneha', 'Kapoor', '8765432109', 'Delhi', '2023-03-22'),
(3, 'Ravi', 'Sharma', '7654321098', 'Mumbai', '2022-07-19'),
(4, 'Pooja', 'Nair', '6543210987', 'Mumbai', '2021-09-05'),
(5, 'Vikas', 'Yadav', '5432109876', 'Bangalore', '2023-06-10'),
(6, 'Ananya', 'Iyer', '4321098765', 'Bangalore', '2022-04-17'),
(7, 'Sandeep', 'Choudhary', '3210987654', 'Chennai', '2023-02-08'),
(8, 'Kiran', 'Reddy', '2109876543', 'Chennai', '2021-12-30'),
(9, 'Manoj', 'Verma', '1098765432', 'Jaipur', '2022-10-25'),
(10, 'Divya', 'Mishra', '9988776655', 'Jaipur', '2023-08-14');




==================================================================================================================

table:Rides

CREATE table Rides(RideId int PRIMARY key,RiderId int ,DriverId int,RideDate DATE,PickupLOcation varchar(50),Distance int, Fare int,RiderStatus varchar(50),
                   FOREIGN key (RiderId) REFERENCES riders(RiderId),
                     FOREIGN key (DriverId) REFERENCES drivers(DriverId));

INSERT INTO Rides (RideId, RiderId, DriverId, RideDate, PickupLocation, Distance, Fare, RiderStatus) VALUES
(1, 9, 1, '2024-03-01', 'Connaught Place', 12.5, 250.50, 'Completed'),
(2, 8, 2, '2024-03-02', 'Karol Bagh', 8.0, 180.75, 'Completed'),
(3, 7, 2, '2024-03-03', 'Andheri', 15.2, 320.00, 'Cancelled'),
(4, 4, 4, '2024-03-04', 'Bandra', 10.5, 220.30, 'Completed'),
(5, 5, 5, '2024-03-05', 'MG Road', 7.3, 150.00, 'Ongoing'),
(6, 4, 4, '2024-03-06', 'Electronic City', 20.1, 400.60, 'Completed'),
(7, 3, 7, '2024-03-07', 'T Nagar', 9.7, 190.45, 'Cancelled'),
(8, 6, 5, '2024-03-08', 'Adyar', 14.4, 290.90, 'Ongoing'),
(9, 1, 9, '2024-03-09', 'MI Road', 6.8, 130.75, 'Completed'),
(10, 10, 10, '2024-03-10', 'Bapu Nagar', 11.9, 240.20, 'Completed');

=======================================================================================================


table:payment

CREATE table payments(paymentId int PRIMARY key, RideId int,
                      FOREIGN key (RideId) REFERENCES rides(RideId),
                     Paymentmethod varchar(50),Amount int,Paymentdate DATE);

INSERT INTO Payments (paymentId, RideId, PaymentMethod, Amount, PaymentDate) VALUES
(1, 3, 'UPI', 250, '2024-03-01'),
(2, 6, 'Card', 180, '2024-03-06'),
(3, 7, 'Cash', 320, '2024-03-05'),
(4, 6, 'UPI', 220, '2024-03-03'),
(5, 4, 'Card', 150, '2024-03-02'),
(6, 9, 'Cash', 400, '2024-03-01'),
(7, 3, 'UPI', 190, '2024-03-07'),
(8, 2, 'Cash', 290, '2024-03-09'),
(9, 1, 'Card', 130, '2024-03-08'),
(10, 8, 'UPI', 240, '2024-03-10');

==========================================================================================================
1. Retrieve the names and contact details of all drivers with a rating of 4.5 or higher.

SELECT FirstName, LastName, Phone 
FROM Drivers 
WHERE Rating >= 4.5;


2. Find the total number of rides completed by each driver

SELECT d.DriverId, d.FirstName, d.LastName, COUNT(r.RideId) AS TotalRides
FROM Drivers d
JOIN Rides r ON d.DriverId = r.DriverId
WHERE r.RiderStatus = 'Completed'
GROUP BY d.DriverId, d.FirstName, d.LastName;

    


3. List all riders who have never booked a ride.

SELECT r.RiderId, r.FirstName, r.LastName, r.Phone, r.City, r.JoinDate
FROM Riders r
LEFT JOIN Rides rd ON r.RiderId = rd.RiderId
WHERE rd.RideId IS NULL;



4. Calculate the total earnings of each driver from completed rides.

SELECT d.DriverId, d.FirstName, d.LastName, SUM(p.Amount) AS TotalEarnings
FROM Drivers d
JOIN Rides r ON d.DriverId = r.DriverId
JOIN Payments p ON r.RideId = p.RideId
WHERE r.RiderStatus = 'Completed'
GROUP BY d.DriverId, d.FirstName, d.LastName;



5. Retrieve the most recent ride for each rider

SELECT r.RiderId, r.FirstName, r.LastName, rd.RideId, rd.RideDate, rd.PickupLocation, rd.Distance, rd.Fare, rd.RiderStatus
FROM Riders r
JOIN Rides rd ON r.RiderId = rd.RiderId
WHERE rd.RideDate = (
    SELECT MAX(RideDate) 
    FROM Rides 
    WHERE Rides.RiderId = r.RiderId);

    

6. Count the number of rides taken in each city.

SELECT r.City, COUNT(rd.RideId) AS TotalRides
FROM Riders r
JOIN Rides rd ON r.RiderId = rd.RiderId
GROUP BY r.City
ORDER BY TotalRides DESC;



7. List all rides where the distance was greater than 20 km.

SELECT RideId, RiderId, DriverId, RideDate, PickupLocation, Distance, Fare, RiderStatus
FROM Rides
WHERE Distance > 20
ORDER BY Distance DESC;


8. Identify the most preferred payment method.

SELECT PaymentMethod, COUNT(PaymentMethod) AS UsageCount
FROM Payments
GROUP BY PaymentMethod
LIMIT 1;


9. Find the top 3 highest-earning drivers.
SELECT d.DriverId, d.FirstName, d.LastName, SUM(p.Amount) AS TotalEarnings
FROM Drivers d
JOIN Rides r ON d.DriverId = r.DriverId
JOIN Payments p ON r.RideId = p.RideId
GROUP BY d.DriverId, d.FirstName, d.LastName
ORDER BY TotalEarnings DESC
LIMIT 3;
10. Retrieve details of all cancelled rides along with the rider's and driver's names

SELECT r.RideId, r.RideDate, r.PickupLocation, r.Distance, r.Fare,  
       r.RiderStatus,  
       ri.FirstName AS RiderName, ri.LastName AS RiderLastName,  
       d.FirstName AS DriverName, d.LastName AS DriverLastName  
FROM Rides r  
JOIN Riders ri ON r.RiderId = ri.RiderId  
JOIN Drivers d ON r.DriverId = d.DriverId  
WHERE r.RiderStatus = 'Cancelled'  
ORDER BY r.RideDate DESC;


